import { EdgeShape } from "../src/types";
import { DrawableGraph } from "../src/main";
import { EdgeTopology } from "../src/drawables/Edge";
import { MolConverter } from "../src/converter/MolConverter";

test("Draw graph programmatically and check topology", () => {
    const graph = new DrawableGraph();
    graph.add_vertex({ x: 10, y: 10 });
    expect(graph.vertices.length).toBe(1);
    expect(graph.edges.length).toBe(0);
    graph.add_vertex({ x: 20, y: 20 });
    graph.bind_vertices(graph.vertices[0], graph.vertices[1]);
    expect(graph.vertices.length).toBe(2);
    expect(graph.edges.length).toBe(1);
    graph.add_vertex({ x: 30, y: 30 });
    graph.bind_vertices(graph.vertices[1], graph.vertices[2]);
    expect(graph.vertices.length).toBe(3);
    expect(graph.edges.length).toBe(2);
    graph.add_vertex({ x: 40, y: 40 });
    graph.bind_vertices(graph.vertices[2], graph.vertices[3]);
    expect(graph.vertices.length).toBe(4);
    expect(graph.edges.length).toBe(3);
    graph.update_topology();
    expect(graph.ringsystems.length).toBe(0);
    graph.bind_vertices(graph.vertices[0], graph.vertices[3]);
    expect(graph.vertices.length).toBe(4);
    expect(graph.edges.length).toBe(4);
    graph.update_topology();
    expect(graph.ringsystems.length).toBe(1);
});

test("Read-write-read mol file and test", () => {
    const mol = `Molecule name
Generated by Butlerov
[no comment provided]
 21 21  0  0  0  0  0  0  0  0  1 V2000
    -1.6163    0.7276    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    -2.4253    0.1399    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
    -2.1163   -0.8112    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    -1.1163   -0.8112    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
    -0.8073    0.1399    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    -3.1163   -0.8112    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    -2.1163   -1.8112    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    -1.6163    1.7276    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.1437    0.4489    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    -0.7503    2.2276    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
    -2.4824    2.2276    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
    0.8869   -0.2203    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.3517    1.4270    0.0000 O   0  0  0  0  0  0  0  0  0  0  0  0
    1.8379    0.0888    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.6790   -1.1984    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    1.4221   -1.8675    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    2.3732   -1.5585    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    2.5811   -0.5804    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    3.1163   -2.2276    0.0000 F   0  0  0  0  0  0  0  0  0  0  0  0
    -2.1163   -2.8112    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    -1.0600    4.1882    0.0000 N   0  0  0  0  0  0  0  0  0  0  0  0
  1  2  1  0  0  0  0
  2  3  1  0  0  0  0
  3  4  1  0  0  0  0
  4  5  1  0  0  0  0
  5  1  1  0  0  0  0
  3  6  1  0  0  0  0
  3  7  1  0  0  0  0
  1  8  1  1  0  0  0
  5  9  1  6  0  0  0
  8 10  1  0  0  0  0
  8 11  2  0  0  0  0
  9 12  1  0  0  0  0
  9 13  2  0  0  0  0
 12 14  2  0  0  0  0
 12 15  1  0  0  0  0
 15 16  2  0  0  0  0
 16 17  1  0  0  0  0
 17 18  2  0  0  0  0
 18 14  1  0  0  0  0
 17 19  1  0  0  0  0
  7 20  3  0  0  0  0
M  CHG  2  10  -1  21   1
M  END`;
    let graph = new MolConverter().graph_from_string(mol);
    expect(graph.vertices.length).toBe(21);
    expect(graph.edges.length).toBe(21);
    const mol_str2 = new MolConverter().graph_to_string(graph);
    graph = new MolConverter().graph_from_string(mol_str2);
    expect(graph.edges.filter(e => e.shape == EdgeShape.SingleUp).length).toBe(1);
    expect(graph.edges.filter(e => e.shape == EdgeShape.SingleDown).length).toBe(1);
    expect(graph.vertices.filter(e => e.label == "F").length).toBe(1);
    expect(graph.vertices.filter(e => e.label == "O").length).toBe(5);
    expect(graph.vertices.filter(e => e.label == "N")[0].charge).toBe(1);

    const dgraph = new DrawableGraph(graph);
    expect(dgraph.edges.filter(e => e.topology == EdgeTopology.Ring).length).toBe(11);
    expect(dgraph.edges.filter(e => e.topology == EdgeTopology.Chain).length).toBe(10);
    expect(dgraph.edges.filter(e => e.shape == EdgeShape.Double).length).toBe(5);
    expect(dgraph.edges.filter(e => e.shape == EdgeShape.Triple).length).toBe(1);
    expect(dgraph.ringsystems.length).toBe(2);
});

test("Read-write mol file and test with ISO", () => {
    const mol = `Molecule name
Generated by Butlerov
[no comment provided]
 12 11  0  0  0  0  0  0  0  0  1 V2000
    1.3337   -2.3100    0.0000 Si  0  0  0  0  0  0  0  0  0  0  0  0
    2.6674   -1.5400    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    2.1037   -3.6437    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.0000   -3.0800    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    0.5637   -0.9763    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    2.6674    0.0000    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    4.0010   -2.3100    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    5.3347   -1.5400    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    4.0010   -3.8500    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
    4.5647   -0.2063    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
    6.6684   -0.7700    0.0000 H   0  0  0  0  0  0  0  0  0  0  0  0
    6.1047   -2.8737    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0
  1  2  1  0  0  0  0
  1  3  1  0  0  0  0
  1  4  1  0  0  0  0
  1  5  1  0  0  0  0
  2  6  1  0  0  0  0
  2  7  1  0  0  0  0
  7  8  1  0  0  0  0
  7  9  1  0  0  0  0
  8 10  1  0  0  0  0
  8 11  1  0  0  0  0
  8 12  1  0  0  0  0
M  CHG  1   7   1
M  ISO  5   1  29   7  14  10   2  11   2  12  13
M  END`;
    const graph = new MolConverter().graph_from_string(mol);
    expect(graph.vertices.length).toBe(12);
    expect(graph.edges.length).toBe(11);
    const mol_str2 = new MolConverter().graph_to_string(graph);
    expect(mol_str2).toBe(mol);
    expect(graph.vertices[0].isotope).toBe(29);
    expect(graph.vertices[0].label).toBe("Si");
    expect(graph.vertices[6].isotope).toBe(14);
    expect(graph.vertices[6].label).toBe("C");
    expect(graph.vertices[6].charge).toBe(1);
    expect(graph.vertices[9].isotope).toBe(2);
    expect(graph.vertices[9].label).toBe("H");
    expect(graph.vertices[10].isotope).toBe(2);
    expect(graph.vertices[10].label).toBe("H");
    expect(graph.vertices[11].isotope).toBe(13);
    expect(graph.vertices[11].label).toBe("C");
});
